    def append_container(
        self,
        {%-  for p, v in container_entity.properties.items() if p not in property_ignores %}
        {{ p | snake_case }}: {{ v.data_type.type_hint }} = _kuber_definitions.UNCHANGED_VALUE,
        {%-  endfor %}
    ) -> '{{ entity.class_name }}':
        """Adds a container object within the specified resource."""
        values = {
            {%-  for p, v in container_entity.properties.items() if p not in property_ignores %}
            '{{ p | snake_case }}': {{ p | snake_case }},
            {%-  endfor %}
        }
        self.{{ containers }}.append({{ container_entity.class_name }}(**{
            k: v
            for k, v in values.items()
            if v != _kuber_definitions.UNCHANGED_VALUE
        }))
        return self

    def get_container(self, name: str) -> typing.Optional['{{ container_entity.class_name }}']:
        """
        Fetch a container definition within this resource by name if such a
        container definition exists. Return None if no container definition
        by that name exists.
        """
        return next((c for c in self.{{ containers }} if c.name == name), None)
