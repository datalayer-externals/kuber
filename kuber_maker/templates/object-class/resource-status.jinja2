    def create_resource(
            self,
            namespace: 'str' = None
    ) -> '{{ entity.class_name }}Status':
        """
        Creates the {{ entity.class_name }} in the currently
        configured Kubernetes cluster and returns the status information
        returned by the Kubernetes API after the create is complete.
        """
        names = [
            'create_namespaced_{{ entity.class_name | snake_case }}',
            'create_{{ entity.class_name | snake_case }}'
        ]

        response = _kube_api.execute(
            action='create',
            resource=self,
            names=names,
            namespace=namespace,
            api_client=None,
            api_args={'body': self.to_dict()}
        )
        return (
            {{ entity.class_name }}Status()
            .from_dict(_kube_api.to_kuber_dict(response.status))
        )

    def replace_resource(
            self,
            namespace: 'str' = None
    ) -> '{{ entity.class_name }}Status':
        """
        Replaces the {{ entity.class_name }} in the currently
        configured Kubernetes cluster and returns the status information
        returned by the Kubernetes API after the replace is complete.
        """
        names = [
            'replace_namespaced_{{ entity.class_name | snake_case }}',
            'replace_{{ entity.class_name | snake_case }}'
        ]

        response = _kube_api.execute(
            action='replace',
            resource=self,
            names=names,
            namespace=namespace,
            api_client=None,
            api_args={'body': self.to_dict(), 'name': self.metadata.name}
        )
        return (
            {{ entity.class_name }}Status()
            .from_dict(_kube_api.to_kuber_dict(response.status))
        )

    def patch_resource(
            self,
            namespace: 'str' = None
    ) -> '{{ entity.class_name }}Status':
        """
        Patches the {{ entity.class_name }} in the currently
        configured Kubernetes cluster and returns the status information
        returned by the Kubernetes API after the replace is complete.
        """
        names = [
            'patch_namespaced_{{ entity.class_name | snake_case }}',
            'patch_{{ entity.class_name | snake_case }}'
        ]

        response = _kube_api.execute(
            action='patch',
            resource=self,
            names=names,
            namespace=namespace,
            api_client=None,
            api_args={'body': self.to_dict(), 'name': self.metadata.name}
        )
        return (
            {{ entity.class_name }}Status()
            .from_dict(_kube_api.to_kuber_dict(response.status))
        )

    def get_resource_status(
            self,
            namespace: 'str' = None
    ) -> '{{ entity.class_name }}Status':
        """
        Returns status information about the given resource within the cluster.
        """
        names = [
            'read_namespaced_{{ entity.class_name | snake_case }}',
            'read_{{ entity.class_name | snake_case }}'
        ]

        response = _kube_api.execute(
            action='read',
            resource=self,
            names=names,
            namespace=namespace,
            api_client=None,
            api_args={'name': self.metadata.name}
        )
        return (
            {{ entity.class_name }}Status()
            .from_dict(_kube_api.to_kuber_dict(response.status))
        )
