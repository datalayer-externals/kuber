
class {{ entity.class_name }}(_kuber_definitions.{{ base_class }}):
    """
    {{ entity.description | printable | wordwrap(width=60) | indent(width=4) }}
    """

    def __init__(
            self,
            {%-  for p, v in entity.properties.items() if base_class == 'Definition' or p not in property_ignores %}
            {{ p | snake_case }}: {{ v.data_type.type_hint }} = None,
            {%-  endfor %}
    ):
        """Create {{ entity.class_name }} instance."""
        super({{ entity.class_name }}, self).__init__(
            api_version='{{ entity.api_version }}',
            kind='{{ entity.class_name }}'
        )
        self._properties = {
            {%  for p, v in entity.properties.items() if base_class == 'Definition' or p not in property_ignores -%}
            '{{ p }}': {{ p | snake_case }} or {{ v.data_type.constructor }},
            {% endfor %}
        }
        self._types = {
            {% for p, v in entity.properties.items() -%}
            '{{ p }}': ({{ v.data_type.python_type }}, {{ v.data_type.item_type }}),
            {% endfor %}
        }
{% include 'object-class/properties.jinja2' %}
{% if containers %}
{% include 'object-class/containers.jinja2' %}
{% endif %}
{% if entity.is_resource and not collection.is_collection %}
{% include 'object-class/resource.jinja2' %}
{%  endif %}
{% if collection.is_collection %}
{% include 'object-class/collection.jinja2' %}
{% endif %}
    def __enter__(self) -> '{{ entity.class_name }}':
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        return False

